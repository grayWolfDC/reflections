How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    using diff -u <old file name> <new file name> highlights differences between the two files
listing what was removed from, and what was added to the new file, relative to the old file. 
For this purpose, the order in which the files are specified in the command line is important. 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I can easily double back on a potential bug and correct my mistake.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  There might many differences (read potential
  bugs) introduced between two sequential versions. Similarly there might not be enough
  changes to justify a commit. Thus it's up to me to decide when something is sufficiently
  changed to qualify as a version. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

	Because files can be dependent on each other, e.g. a program might need multiple files to function.


How can you use the commands git log and git diff to view the history of files?

    use log to get the history of commits and their respective id number. 
    use diff to compare two different commits. Question, however, how can I effectively search through 
    the git log?

How might using version control make you more confident to make changes that
could break something?

	I can revert to any version previously committed. 

Now that you have your workspace set up, what do you want to try using Git for?

    I want to start a copepod IBM repository just to kickstart that damn thing
